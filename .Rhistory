abline(v = 5, col = 'blue', lty = 'dotted')
(jcutoff <- exp(jcutoff.log))
rows.keep.tmp <- gdevs[which(gdevs > jcutoff)]
return(rows.keep.tmp)
})
rows.keep.lst <- lapply(jmarks, function(jmark.tmp){
# jmark.tmp <- jmarks[[3]]
mat.tmp <- dats.cellfilt[[jmark.tmp]]
nvec <- colSums(mat.tmp)
gdevs <- apply(mat.tmp, 1, function(xvec){
scchicFuncs::binomial_deviance(x = xvec, p = sum(xvec) / sum(nvec), n = nvec)
})
plot(density(log(gdevs)), main = jmark.tmp)
abline(v = 5, col = 'blue', lty = 'dotted')
(jcutoff <- exp(jcutoff.log))
rows.keep.tmp <- gdevs[which(gdevs > jcutoff)]
return(rows.keep.tmp)
})
lapply(rows.keep.lst, length)
# common rows
rows.keep.common <- unique(unlist(rows.keep.lst))
length(rows.keep.common)
dim(mat.tmp)
jcutoff.log <- 6
rows.keep.lst <- lapply(jmarks, function(jmark.tmp){
print(jmark.tmp)
# jmark.tmp <- jmarks[[3]]
mat.tmp <- dats.cellfilt[[jmark.tmp]]
nvec <- colSums(mat.tmp)
gdevs <- apply(mat.tmp, 1, function(xvec){
scchicFuncs::binomial_deviance(x = xvec, p = sum(xvec) / sum(nvec), n = nvec)
})
plot(density(log(gdevs)), main = jmark.tmp)
abline(v = jcutoff.log, col = 'blue', lty = 'dotted')
(jcutoff <- exp(jcutoff.log))
rows.keep.tmp <- gdevs[which(gdevs > jcutoff)]
return(rows.keep.tmp)
})
print(lapply(rows.keep.lst, length))
top.genes <- 5000
head(gdevs)
head(gdevs.sorted)
head(top.genes)
head(gdevs.sorted)
# jcutoff.log <- 6
jcutoff.log <- 5.5
top.genes <- 5000
rows.keep.lst <- lapply(jmarks, function(jmark.tmp){
print(jmark.tmp)
# jmark.tmp <- jmarks[[3]]
mat.tmp <- dats.cellfilt[[jmark.tmp]]
nvec <- colSums(mat.tmp)
gdevs <- apply(mat.tmp, 1, function(xvec){
scchicFuncs::binomial_deviance(x = xvec, p = sum(xvec) / sum(nvec), n = nvec)
})
gdevs.sorted <- sort(gdevs, decreasing = TRUE)
rows.keep.tmp <- names(gdevs.sorted[1:top.genes])
# plot(density(log(gdevs)), main = jmark.tmp)
# abline(v = jcutoff.log, col = 'blue', lty = 'dotted')
# (jcutoff <- exp(jcutoff.log))
#
# rows.keep.tmp <- gdevs[which(gdevs > jcutoff)]
return(rows.keep.tmp)
})
print(lapply(rows.keep.lst, length))
# common rows
rows.keep.common <- unique(unlist(rows.keep.lst))
print(length(rows.keep.common))
dats.cellfilt[[1]][1:5, 1:5]
dats.cellfilt.binfilt <- lapply(dats.cellfilt, function(jdat){
jdat[rows.keep.common, ]
})
lapply(dats.cellfilt.binfilt, dim)
lapply(dats.cellfilt.binfilt, dim)
lapply(dats.cellfilt.binfilt,dim)
lapply(dats.cellfilt.binfilt, dim)
for (jmark in jmarks){
print(jmark)
outf.gw <- file.path(outdir.gw, paste0("count_mat.10kb_genomewide.", jmark, ".rds"))
outf.gwfilt <- file.path(outdir.gwfilt, paste0("count_mat.10kb_genomewide_filt.", jmark, ".rds"))
saveRDS(dats.cellfilt[[jmark]], file = outf.gw)
saveRDS(dats.cellfilt.binfilt[[jmark]], file = outf.gwfilt)
}
# write outputs
outdir.gw <- file.path(hubprefix, "jyeung/data/dblchic/from_cluster/count_mats_for_LDA.10kb/10kb_genomewide")
outdir.gwfilt <- file.path(hubprefix, "jyeung/data/dblchic/from_cluster/count_mats_for_LDA.10kb/10kb_genomewide_filt")
for (jmark in jmarks){
print(jmark)
outf.gw <- file.path(outdir.gw, paste0("count_mat.10kb_genomewide.", jmark, ".rds"))
outf.gwfilt <- file.path(outdir.gwfilt, paste0("count_mat.10kb_genomewide_filt.", jmark, ".rds"))
saveRDS(dats.cellfilt[[jmark]], file = outf.gw)
saveRDS(dats.cellfilt.binfilt[[jmark]], file = outf.gwfilt)
}
infs <- lapply(jmarks, function(jmark){
inf.tmp <- file.path(hubprefix, paste0("jyeung/data/dblchic/from_cluster/2021-03-17_redo_count_tables.TSS_allgenes/countTables.unfixed.TSS/all_BM_", jmark, "_200119.mq_40.TSS.winsize_10000.csv"))
assertthat::assert_that(file.exists(inf.tmp))
return(inf.tmp)
})
dats <- lapply(infs, function(jinf){
dat <- ReadMatSlideWinFormat(jinf)
})
lapply(dats, function(dim))
dats <- lapply(infs, function(jinf){
dat <- ReadMatTSSFormat(jinf)
})
lapply(dats, dim)
inf.rdata <- file.path(hubprefix, "jyeung/data/dblchic/from_rstudio/primetime/unfixed_louvain2/BM_UnfixedLouvain2.FinalCellClusterTable.2020-03-21.RData")
load(inf.rdata, v=T)
cells.keep <- unique(dat.final.annots$cell)
dats.cellfilt <- lapply(jmarks, function(jmark){
print(jmark)
mat.tmp <- dats[[jmark]]
cols.keep <- colnames(dats[[jmark]]) %in% cells.keep
mat.tmp.filt <- mat.tmp[, cols.keep]
return(mat.tmp.filt)
})
lapply(dats, dim)
lapply(dats.cellfilt, dim)
# jcutoff.log <- 6
jcutoff.log <- 5.5
top.genes <- 5000
rows.keep.lst <- lapply(jmarks, function(jmark.tmp){
print(jmark.tmp)
# jmark.tmp <- jmarks[[3]]
mat.tmp <- dats.cellfilt[[jmark.tmp]]
nvec <- colSums(mat.tmp)
gdevs <- apply(mat.tmp, 1, function(xvec){
scchicFuncs::binomial_deviance(x = xvec, p = sum(xvec) / sum(nvec), n = nvec)
})
gdevs.sorted <- sort(gdevs, decreasing = TRUE)
rows.keep.tmp <- names(gdevs.sorted[1:top.genes])
# plot(density(log(gdevs)), main = jmark.tmp)
# abline(v = jcutoff.log, col = 'blue', lty = 'dotted')
# (jcutoff <- exp(jcutoff.log))
#
# rows.keep.tmp <- gdevs[which(gdevs > jcutoff)]
return(rows.keep.tmp)
})
print(lapply(rows.keep.lst, length))
# common rows
rows.keep.common <- unique(unlist(rows.keep.lst))
print(length(rows.keep.common))
dats.cellfilt.binfilt <- lapply(dats.cellfilt, function(jdat){
jdat[rows.keep.common, ]
})
dim(dats.cellfilt.binfilt)
lapply(dats.cellfilt.binfilt, dim)
lapply(dats.cellfilt.binfilt, dim)
lapply(dats.cellfilt, dim)
source('~/projects/scChIX/analysis_scripts/unfixed/unfixed_10kb_prepare_mats.R', echo=TRUE)
source('~/projects/scChIX/analysis_scripts/unfixed/unfixed_10kb_prepare_mats.TSS.R', echo=TRUE)
infs <- lapply(jmarks, function(jmark){
inf.tmp <- file.path(hubprefix, paste0("jyeung/data/dblchic/from_cluster/2021-03-17_redo_count_tables.TSS_allgenes/countTables.unfixed.TSS.refseq/all_BM_", jmark, "_200119.mq_40.TSS.winsize_10000.csv.gz"))
assertthat::assert_that(file.exists(inf.tmp))
return(inf.tmp)
})
source('~/projects/scChIX/analysis_scripts/unfixed/unfixed_10kb_prepare_mats.TSS.R', echo=TRUE)
lapply(dats.cellfilt.binfilt, dim)
lapply(dats.cellfilt, dim)
# write outputs
outdir.gw <- file.path(hubprefix, "jyeung/data/dblchic/from_cluster/count_mats_for_LDA.10kb/10kb_TSS")
outdir.gwfilt <- file.path(hubprefix, "jyeung/data/dblchic/from_cluster/count_mats_for_LDA.10kb/10kb_TSS_filt")
dir.create(outdir.gw)
dir.create(outdir.gwfilt)
for (jmark in jmarks){
print(jmark)
outf.gw <- file.path(outdir.gw, paste0("count_mat.10kb_TSS.", jmark, ".rds"))
outf.gwfilt <- file.path(outdir.gwfilt, paste0("count_mat.10kb_TSS_filt.", jmark, ".rds"))
saveRDS(dats.cellfilt[[jmark]], file = outf.gw)
saveRDS(dats.cellfilt.binfilt[[jmark]], file = outf.gwfilt)
}
dats.cellfilt.binfilt <- lapply(dats.cellfilt, function(jdat){
jdat[rows.keep.common, ]
cells.keep <- colSums(jdat.filt) > 0
return(jdat.filt[, cells.keep])
})
lapply(dats.cellfilt.binfilt, dim)
lapply(dats.cellfilt, dim)
# write outputs
outdir.gw <- file.path(hubprefix, "jyeung/data/dblchic/from_cluster/count_mats_for_LDA.10kb/10kb_TSS")
outdir.gwfilt <- file.path(hubprefix, "jyeung/data/dblchic/from_cluster/count_mats_for_LDA.10kb/10kb_TSS_filt")
dir.create(outdir.gw)
dir.create(outdir.gwfilt)
for (jmark in jmarks){
print(jmark)
outf.gw <- file.path(outdir.gw, paste0("count_mat.10kb_TSS.", jmark, ".rds"))
outf.gwfilt <- file.path(outdir.gwfilt, paste0("count_mat.10kb_TSS_filt.", jmark, ".rds"))
saveRDS(dats.cellfilt[[jmark]], file = outf.gw)
saveRDS(dats.cellfilt.binfilt[[jmark]], file = outf.gwfilt)
}
lapply(dats.cellfilt.binfilt, dim)
lapply(dats.cellfilt, dim)
lapply(dats.cellfilt.binfilt, dim)
lapply(dats.cellfilt, dim)
source('~/projects/scChIX/analysis_scripts/unfixed/unfixed_10kb_prepare_mats.R', echo=TRUE)
infs.meta <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, "jyeung/data/scChiC/from_rstudioserver/cell_cluster_tables.batch_corrected_umaps.2020-12-28/rearranged_by_lineage/shuffled_cells/metadata_batch_corrected.arranged_by_lineage.shuffled.H3K9me3.2021-02-19.txt")
assertthat::assert_that(file.exists(inf))
return(inf)
})
source('~/projects/scchic/scripts/rstudioserver_analysis/review_scripts/16-filter_HSPCs_countmats.R', echo=TRUE)
infs.meta
infs.meta$H3K4me1
dats.meta <- lapply(infs.meta, fread)
head(dats.meta[[1]])
infs.tss.fits <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, "jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3/poisson_fit_TSS_10000.H3K4me1.2020-11-14.newannot2.RData")
assertthat::assert_that(file.exists(inf))
return(inf)
})
loadd(infs.tss.fits[[1]], v=T)
load(infs.tss.fits[[1]], v=T)
mats.tss <- lapply(infs.tss.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.tss[[1]][1:5, 1:5]
mats.filt.tss <- lapply(jmarks, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
mats.filt.tmp <- mats.tss[, cells.keep]
})
mats.filt.tss <- lapply(jmarks, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
})
mats.filt.tss <- lapply(jmarks, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
cols.keep <- colnames(mats.tss) %in% cells.keep
mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
})
lapply(mats.filt.tss, dim)
head(dats.meta[[1]])
mats.tss[[1]][1:5, 1:5]
infs.tss.fits <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, "jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3/poisson_fit_TSS_10000.", jmark, ".2020-11-14.newannot2.RData")
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.tss <- lapply(infs.tss.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
infs.tss.fits <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3/poisson_fit_TSS_10000.", jmark, ".2020-11-14.newannot2.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
jmarks.nok9 <- c("H3K4me1", "H3K4me3", "H3K27me3"); names(jmarks.nok9) <- jmarks.nok9
infs.tss.fits <- lapply(jmarks.nok9, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3/poisson_fit_TSS_10000.", jmark, ".2020-11-14.newannot2.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.tss <- lapply(infs.tss.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
cols.keep <- colnames(mats.tss) %in% cells.keep
mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
})
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
# cols.keep <- colnames(mats.tss) %in% cells.keep
# mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
})
print(length(cells.keep))
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
# cols.keep <- colnames(mats.tss) %in% cells.keep
# mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
})
mats.tss[[1]][1:5, 1:5]
mats.tss[[2]][1:5, 1:5]
mats.tss[[3]][1:5, 1:5]
head(dats.meta[[1]]$cell)
head(dats.meta[[2]]$cell)
infs.meta <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/cell_cluster_tables.batch_corrected_umaps.2020-12-28/rearranged_by_lineage/shuffled_cells/metadata_batch_corrected.arranged_by_lineage.shuffled.", jmark, ".2021-02-19.txt"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
dats.meta <- lapply(infs.meta, fread)
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
# cols.keep <- colnames(mats.tss) %in% cells.keep
# mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
})
lapply(dats.meta, dim)
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
cols.keep <- colnames(mats.tss) %in% cells.keep
mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
# mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
})
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
cols.keep <- colnames(mats.tss) %in% cells.keep
mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
# mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
jmark
jmark <- jmarks[[1]]
cells.keep <- dats.meta[[jmark]]$cell
head(cells.keep)
print(length(cells.keep))
cols.keep <- colnames(mats.tss) %in% cells.keep
mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
dim(mats.filt.tmp)
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
cols.keep <- colnames(mats.tss[[jmark]]) %in% cells.keep
mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
# mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
jmarks.nok9 <- c("H3K4me1", "H3K4me3"); names(jmarks.nok9) <- jmarks.nok9
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
# cols.keep <- colnames(mats.tss[[jmark]]) %in% cells.keep
# mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
infs.tss.fits <- lapply(jmarks.nok9, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3/poisson_fit_TSS_10000.", jmark, ".2020-11-14.newannot2.RData"))
if (jmark == "H3K27me3"){
inf <- file.path(hubprefix, "jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3_H3K27me3_rep2_rep3reseq/poisson_fit_TSS_10000.H3K27me3.2021-02-02.newannot2.rep2_rep3seq.with_se.RData")
}
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.tss <- lapply(infs.tss.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
# cols.keep <- colnames(mats.tss[[jmark]]) %in% cells.keep
# mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
jmarks.nok9 <- c("H3K4me1", "H3K4me3", "H3K27me3"); names(jmarks.nok9) <- jmarks.nok9
infs.tss.fits <- lapply(jmarks.nok9, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3/poisson_fit_TSS_10000.", jmark, ".2020-11-14.newannot2.RData"))
if (jmark == "H3K27me3"){
inf <- file.path(hubprefix, "jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3_H3K27me3_rep2_rep3reseq/poisson_fit_TSS_10000.H3K27me3.2021-02-02.newannot2.rep2_rep3seq.with_se.RData")
}
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.tss <- lapply(infs.tss.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
# cols.keep <- colnames(mats.tss[[jmark]]) %in% cells.keep
# mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.H3K27me3.2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.bins <- lapply(infs.bins.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.filt.bins <- lapply(jmarks, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
mats.filt.tmp <- mats.bins[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
lapply(mats.bins, dim)
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.", jmark, ".2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.bins <- lapply(infs.bins.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.filt.bins <- lapply(jmarks, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
mats.filt.tmp <- mats.bins[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.", jmark, ".2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.bins <- lapply(infs.bins.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.filt.bins <- lapply(jmarks, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
mats.filt.tmp <- mats.bins[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.", jmark, ".2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.bins <- lapply(infs.bins.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
lapply(mats.bins, dim)
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
if (jmark == "H3K27me3"){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.", jmark, ".2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
} else {
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.again/poisson_fit_bins.", jmark, ".2020-12-12.newannot2.witherrors.MoreBins.RData"))
}
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.bins <- lapply(infs.bins.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
lapply(mats.bins, dim)
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
# if (jmark == "H3K27me3"){
#   inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.", jmark, ".2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
# } else {
#   inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.again/poisson_fit_bins.", jmark, ".2020-12-12.newannot2.witherrors.MoreBins.RData"))
# }
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.allmarks_spikeins/poisson_fit_bins.", jmark, ".2020-12-25.newannot2.witherrors.MoreBins.newestmeta.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
# if (jmark == "H3K27me3"){
#   inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.", jmark, ".2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
# } else {
#   inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.again/poisson_fit_bins.", jmark, ".2020-12-12.newannot2.witherrors.MoreBins.RData"))
# }
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.allmarks_spikeins/poisson_fit_bins.", jmark, ".2020-12-25.newannot2.witherrors.MoreBins.newestmeta.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.bins <- lapply(infs.bins.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
lapply(mats.bins, dim)
lapply(mats.bins, dim)
mats.filt.bins <- lapply(jmarks, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
mats.filt.tmp <- mats.bins[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
# filter HSPCs
dats.meta <- lapply(dats.meta, function(jdat){
subset(jdat, cluster == "HSPCs")
})
lapply(dats.meta, dim)
for (jmark in jmarks){
print(jmark)
outf.tss <- file.path(outdir.tss, paste0("HSPCs_filt_countmat_TSS_10kb.", jmark, ".", Sys.Date(), ".rds"))
outf.bins <- file.path(outdir.bins, paste0("HSPCs_filt_countmat_bins_50kb.", jmark, ".", Sys.Date(), ".rds"))
saveRDS(mats.filt.tss[[jmark]], outf.tss)
saveRDS(mats.filt.bins[[jmark]], outf.bins)
}
source('~/projects/scchic/scripts/rstudioserver_analysis/review_scripts/16-filter_HSPCs_countmats.R', echo=TRUE)
lapply(mats.filt.tss, dim)
lapply(mats.filt.bins)
lapply(mats.tss, dim)
lapply(mats.filt.tss, dim)
lapply(mats.tss, dim)
