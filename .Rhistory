assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.tss <- lapply(infs.tss.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
infs.tss.fits <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3/poisson_fit_TSS_10000.", jmark, ".2020-11-14.newannot2.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
jmarks.nok9 <- c("H3K4me1", "H3K4me3", "H3K27me3"); names(jmarks.nok9) <- jmarks.nok9
infs.tss.fits <- lapply(jmarks.nok9, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3/poisson_fit_TSS_10000.", jmark, ".2020-11-14.newannot2.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.tss <- lapply(infs.tss.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
cols.keep <- colnames(mats.tss) %in% cells.keep
mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
})
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
# cols.keep <- colnames(mats.tss) %in% cells.keep
# mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
})
print(length(cells.keep))
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
# cols.keep <- colnames(mats.tss) %in% cells.keep
# mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
})
mats.tss[[1]][1:5, 1:5]
mats.tss[[2]][1:5, 1:5]
mats.tss[[3]][1:5, 1:5]
head(dats.meta[[1]]$cell)
head(dats.meta[[2]]$cell)
infs.meta <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/cell_cluster_tables.batch_corrected_umaps.2020-12-28/rearranged_by_lineage/shuffled_cells/metadata_batch_corrected.arranged_by_lineage.shuffled.", jmark, ".2021-02-19.txt"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
dats.meta <- lapply(infs.meta, fread)
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
# cols.keep <- colnames(mats.tss) %in% cells.keep
# mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
})
lapply(dats.meta, dim)
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
cols.keep <- colnames(mats.tss) %in% cells.keep
mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
# mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
})
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
cols.keep <- colnames(mats.tss) %in% cells.keep
mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
# mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
jmark
jmark <- jmarks[[1]]
cells.keep <- dats.meta[[jmark]]$cell
head(cells.keep)
print(length(cells.keep))
cols.keep <- colnames(mats.tss) %in% cells.keep
mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
dim(mats.filt.tmp)
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
cols.keep <- colnames(mats.tss[[jmark]]) %in% cells.keep
mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
# mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
jmarks.nok9 <- c("H3K4me1", "H3K4me3"); names(jmarks.nok9) <- jmarks.nok9
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
# cols.keep <- colnames(mats.tss[[jmark]]) %in% cells.keep
# mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
infs.tss.fits <- lapply(jmarks.nok9, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3/poisson_fit_TSS_10000.", jmark, ".2020-11-14.newannot2.RData"))
if (jmark == "H3K27me3"){
inf <- file.path(hubprefix, "jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3_H3K27me3_rep2_rep3reseq/poisson_fit_TSS_10000.H3K27me3.2021-02-02.newannot2.rep2_rep3seq.with_se.RData")
}
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.tss <- lapply(infs.tss.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
# cols.keep <- colnames(mats.tss[[jmark]]) %in% cells.keep
# mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
jmarks.nok9 <- c("H3K4me1", "H3K4me3", "H3K27me3"); names(jmarks.nok9) <- jmarks.nok9
infs.tss.fits <- lapply(jmarks.nok9, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3/poisson_fit_TSS_10000.", jmark, ".2020-11-14.newannot2.RData"))
if (jmark == "H3K27me3"){
inf <- file.path(hubprefix, "jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3_H3K27me3_rep2_rep3reseq/poisson_fit_TSS_10000.H3K27me3.2021-02-02.newannot2.rep2_rep3seq.with_se.RData")
}
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.tss <- lapply(infs.tss.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.filt.tss <- lapply(jmarks.nok9, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
# cols.keep <- colnames(mats.tss[[jmark]]) %in% cells.keep
# mats.filt.tmp <- mats.tss[[jmark]][, cols.keep]
mats.filt.tmp <- mats.tss[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.H3K27me3.2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.bins <- lapply(infs.bins.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.filt.bins <- lapply(jmarks, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
mats.filt.tmp <- mats.bins[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
lapply(mats.bins, dim)
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.", jmark, ".2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.bins <- lapply(infs.bins.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.filt.bins <- lapply(jmarks, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
mats.filt.tmp <- mats.bins[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.", jmark, ".2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.bins <- lapply(infs.bins.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
mats.filt.bins <- lapply(jmarks, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
mats.filt.tmp <- mats.bins[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.", jmark, ".2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.bins <- lapply(infs.bins.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
lapply(mats.bins, dim)
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
if (jmark == "H3K27me3"){
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.", jmark, ".2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
} else {
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.again/poisson_fit_bins.", jmark, ".2020-12-12.newannot2.witherrors.MoreBins.RData"))
}
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.bins <- lapply(infs.bins.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
lapply(mats.bins, dim)
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
# if (jmark == "H3K27me3"){
#   inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.", jmark, ".2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
# } else {
#   inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.again/poisson_fit_bins.", jmark, ".2020-12-12.newannot2.witherrors.MoreBins.RData"))
# }
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.allmarks_spikeins/poisson_fit_bins.", jmark, ".2020-12-25.newannot2.witherrors.MoreBins.newestmeta.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
# with K9me3
infs.bins.fits <- lapply(jmarks, function(jmark){
# if (jmark == "H3K27me3"){
#   inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.HSPCs_vs_nonHSPCs/poisson_fit_bins.", jmark, ".2021-02-04.newannot2.witherrors.MoreBins.HSPCs_vs_nonHSPCs.total.RData"))
# } else {
#   inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.again/poisson_fit_bins.", jmark, ".2020-12-12.newannot2.witherrors.MoreBins.RData"))
# }
inf <- file.path(hubprefix, paste0("jyeung/data/scChiC/from_rstudioserver/poisson_fits_BM_AllMerged3.allmarks_spikeins/poisson_fit_bins.", jmark, ".2020-12-25.newannot2.witherrors.MoreBins.newestmeta.RData"))
assertthat::assert_that(file.exists(inf))
return(inf)
})
mats.bins <- lapply(infs.bins.fits, function(jinf){
load(jinf, v=T)
return(jmat.mark)
})
lapply(mats.bins, dim)
lapply(mats.bins, dim)
mats.filt.bins <- lapply(jmarks, function(jmark){
cells.keep <- dats.meta[[jmark]]$cell
print(length(cells.keep))
mats.filt.tmp <- mats.bins[[jmark]][, cells.keep]
print(dim(mats.filt.tmp))
return(mats.filt.tmp)
})
# filter HSPCs
dats.meta <- lapply(dats.meta, function(jdat){
subset(jdat, cluster == "HSPCs")
})
lapply(dats.meta, dim)
for (jmark in jmarks){
print(jmark)
outf.tss <- file.path(outdir.tss, paste0("HSPCs_filt_countmat_TSS_10kb.", jmark, ".", Sys.Date(), ".rds"))
outf.bins <- file.path(outdir.bins, paste0("HSPCs_filt_countmat_bins_50kb.", jmark, ".", Sys.Date(), ".rds"))
saveRDS(mats.filt.tss[[jmark]], outf.tss)
saveRDS(mats.filt.bins[[jmark]], outf.bins)
}
source('~/projects/scchic/scripts/rstudioserver_analysis/review_scripts/16-filter_HSPCs_countmats.R', echo=TRUE)
lapply(mats.filt.tss, dim)
lapply(mats.filt.bins)
lapply(mats.tss, dim)
lapply(mats.filt.tss, dim)
lapply(mats.tss, dim)
library(data.table)
source("~/projects/scChIX/analysis_scripts/pseudotime/4b-fit_downstream_by_celltypes_jupyterhub.R", echo=TRUE)
dev.off()
source("~/projects/scChIX/analysis_scripts/pseudotime/4b-fit_downstream_by_celltypes_jupyterhub.R", echo=TRUE)
head(merged.dat.filt.long)
dat.meta <- "/nfs/scistore12/hpcgrp/jyeung/data_from_Hubrecht/hpc_hub_oudenaarden/scChIX_gastrulation/from_analysis_macbook/heatmaps_downstream/dat_meta_ordered_colorcoded.rds"
inf.meta <- "/nfs/scistore12/hpcgrp/jyeung/data_from_Hubrecht/hpc_hub_oudenaarden/scChIX_gastrulation/from_analysis_macbook/heatmaps_downstream/dat_meta_ordered_colorcoded.rds"
dat.meta <- fread(inf.meta)
inf.meta <- "/nfs/scistore12/hpcgrp/jyeung/data_from_Hubrecht/hpc_hub_oudenaarden/scChIX_gastrulation/from_analysis_macbook/heatmaps_downstream/dat_meta_ordered_colorcoded.rds"
dat.meta <- readRDS(inf.meta)
head(dat.meta)
dat.meta$K9m3[1:5, 1:5]
colnames(dat.meta$K9m3)
library(JFuncs)
AssignHash
clst2col <- hash::hash(dat.meta[[jmark.tmp]]$cluster, dat.meta[[jmark.tmp]]$colorcode)
print(jmark.tmp)
colsidelabs <- sapply(colnames(mat.estimates), function(x) AssignHash(x, clst2col, null.fill = x))
print(colsidelabs)
heatmap3::heatmap3(as.matrix(mat.estimates), ColSideLabs = colsidelabs)
table(dat.meta[[jmark.tmp]]$cluster)
colnames(mat.estimates)
# correct typo
colnames(mat.estimates) <- sapply(colnames(mat), function(x) gsub("SchwannCellPrecusor", "SchwannCellPrecursor", x))
colsidelabs <- sapply(colnames(mat.estimates), function(x) AssignHash(x, clst2col, null.fill = x))
print(colsidelabs)
# correct typo
colnames(mat.estimates) <- sapply(colnames(mat.estimates), function(x) gsub("SchwannCellPrecusor", "SchwannCellPrecursor", x))
colsidelabs <- sapply(colnames(mat.estimates), function(x) AssignHash(x, clst2col, null.fill = x))
print(colsidelabs)
source("~/projects/scChIX/analysis_scripts/pseudotime/4b-fit_downstream_by_celltypes_jupyterhub.R", echo=TRUE)
heatmap3::heatmap3(as.matrix(mat.estimates), ColSideLabs = colsidelabs)
colsidelabs
as.matrix(mat.estimates)[1:5, 1:5]
heatmap3::heatmap3(as.matrix(mat.estimates), ColSideColors = colsidelabs)
source("~/projects/scChIX/analysis_scripts/pseudotime/4b-fit_downstream_by_celltypes_jupyterhub.R", echo=TRUE)
jmarks <- paste(c("K36", "K9m3", "K36-K9m3")); names(jmarks) <- jmarks
jmarks
infs <- lapply(jmarks, function(jmark){
file.path(indir, paste0("ldaOut.countmat_var_filt.", jmark, ".Robj"))
})
source("~/projects/scChIX/analysis_scripts/finals/get_processed_data.R", echo=TRUE)
outs <- lapply(infs, function(jinf){
load(jinf, v=T)
return(list(count.mat = count.mat, out.lda = out.lda))
})
count.mat.lst <- lapply(outs, function(jout){
jout$count.mat
})
out.lda <- lapply(outs, function(jout){
jout$out.lda
})
count.mat.lst[[1]]
outdir <- "/nfs/scistore12/hpcgrp/jyeung/data_from_Hubrecht/hpc_hub_oudenaarden/scchix_databank_GEO/processed_data"
writeouts <- lapply(jmarks, function(jmark){
print(jmark)
jmat <- count.mat.lst[[jmark]]
saveRDS(object = jmat, file = outf)
})
source("~/projects/scChIX/analysis_scripts/finals/get_processed_data.R", echo=TRUE)
writeouts <- lapply(jmarks, function(jmark){
print(jmark)
outf <- file.path(outdir, paste0("count_mat_gastrulation.", jmark, ".Robj"))
jmat <- count.mat.lst[[jmark]]
saveRDS(object = jmat, file = outf)
})
infs.mac <- lapply(jmarks, function(jmark){
file.path(indir.mac, paste0("ldaOut.countmat_var_filt.", jmark, ".Robj"))
})
indir.mac <- "/nfs/scistore12/hpcgrp/jyeung/data_from_Hubrecht/hpc_hub_oudenaarden/scChIX_differentiation/from_cluster/snakemakes_round3/dynamicgenebody_GranuMacro_H3K4me1_H3K36me3_H3K4me1-H3K36me3/snakemake_outputs/LDA_outputs_init"
infs.mac <- lapply(jmarks, function(jmark){
file.path(indir.mac, paste0("ldaOut.countmat_var_filt.", jmark, ".Robj"))
})
outs <- lapply(infs.mac, function(jinf){
load(jinf, v=T)
return(list(count.mat = count.mat, out.lda = out.lda))
})
indir.mac <- "/nfs/scistore12/hpcgrp/jyeung/data_from_Hubrecht/hpc_hub_oudenaarden/scChIX_differentiation/from_cluster/snakemakes_round3/dynamicgenebody_GranuMacro_H3K4me1_H3K36me3_H3K4me1-H3K36me3/snakemake_outputs/LDA_outputs_init"
jmarks.mac <- paste(c("K36", "K9m3", "K36-K9m3")); names(jmarks.mac) <- jmarks.mac
jmarks.mac <- paste(c("H3K4me1", "H3K36me3", "H3K4me1-H3K36me3")); names(jmarks.mac) <- jmarks.mac
infs.mac <- lapply(jmarks, function(jmark){
file.path(indir.mac, paste0("ldaOut.countmat_var_filt.", jmark, ".Robj"))
})
outs.mac <- lapply(infs.mac, function(jinf){
load(jinf, v=T)
return(list(count.mat = count.mat, out.lda = out.lda))
})
jmarks
infs.mac <- lapply(jmarks.mac, function(jmark){
file.path(indir.mac, paste0("ldaOut.countmat_var_filt.", jmark, ".Robj"))
})
outs.mac <- lapply(infs.mac, function(jinf){
load(jinf, v=T)
return(list(count.mat = count.mat, out.lda = out.lda))
})
writeouts <- lapply(jmarks, function(jmark){
print(jmark)
outf <- file.path(outdir, paste0("count_mat_macrophagedifferentiation.", jmark, ".Robj"))
jmat <- outs.mac[[jmark]]$count.mat
saveRDS(object = jmat, file = outf)
})
writeouts.mac <- lapply(jmarks.mac, function(jmark){
print(jmark)
outf <- file.path(outdir, paste0("count_mat_macrophagedifferentiation.", jmark, ".Robj"))
jmat <- outs.mac[[jmark]]$count.mat
saveRDS(object = jmat, file = outf)
})
source("~/projects/scChIX/analysis_scripts/simulation/5-summarize_across_varying_frac_overlap_bins.R", echo=TRUE)
source("~/projects/scChIX/analysis_scripts/simulation/5-summarize_across_varying_frac_overlap_bins.R", echo=TRUE)
source("~/projects/scChIX/analysis_scripts/simulation/5-summarize_across_varying_frac_overlap_bins.R", echo=TRUE)
source("~/projects/scChIX/analysis_scripts/simulation/5-summarize_across_varying_frac_overlap_bins.R", echo=TRUE)
ggplot(dat.umap.lst %>% bind_rows(), aes(x = umap1.scale.shift, y = umap2.scale, color = ctype, group = cell)) +
geom_point() +
geom_path(alpha = 0.02) +
geom_vline(xintercept = 0, linetype = "dotted") +
scale_color_manual(values = cbPalette.ctype, na.value = "grey85") +
facet_wrap(~frac.overlapping.bins) +
theme_bw() +
theme(aspect.ratio=0.5, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom")
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
ggplot(dat.umap.lst %>% bind_rows(), aes(x = umap1.scale.shift, y = umap2.scale, color = ctype, group = cell)) +
geom_point() +
geom_path(alpha = 0.02) +
geom_vline(xintercept = 0, linetype = "dotted") +
scale_color_manual(values = cbPalette.ctype, na.value = "grey85") +
facet_wrap(~frac.overlapping.bins) +
theme_bw() +
theme(aspect.ratio=0.5, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom")
dat.umap.long <- dat.umap.lst %>% bind_rows() %>%
mutate(umap2.scale = ifelse(ctype == "B", umap2.scale + 0.5))
ggplot(dat.umap.long, aes(x = umap1.scale.shift, y = umap2.scale, color = ctype, group = cell)) +
geom_point() +
geom_path(alpha = 0.02) +
geom_vline(xintercept = 0, linetype = "dotted") +
scale_color_manual(values = cbPalette.ctype, na.value = "grey85") +
facet_wrap(~frac.overlapping.bins) +
theme_bw() +
theme(aspect.ratio=0.5, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom")
dat.umap.long <- dat.umap.lst %>% bind_rows() %>%
mutate(umap2.scale = ifelse(ctype == "B", umap2.scale + 0.5))
ggplot(dat.umap.long, aes(x = umap1.scale.shift, y = umap2.scale, color = ctype, group = cell)) +
geom_point() +
geom_path(alpha = 0.02) +
geom_vline(xintercept = 0, linetype = "dotted") +
scale_color_manual(values = cbPalette.ctype, na.value = "grey85") +
facet_wrap(~frac.overlapping.bins) +
theme_bw() +
theme(aspect.ratio=0.5, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom")
dat.umap.long <- dat.umap.lst %>% bind_rows() %>%
mutate(umap2.scale = ifelse(ctype == "B", umap2.scale + 0.5))
dat.umap.long <- dat.umap.lst %>% bind_rows() %>%
mutate(umap2.scale = ifelse(ctype == "B", umap2.scale + 0.5, umap2.scale))
ggplot(dat.umap.long, aes(x = umap1.scale.shift, y = umap2.scale, color = ctype, group = cell)) +
geom_point() +
geom_path(alpha = 0.02) +
geom_vline(xintercept = 0, linetype = "dotted") +
scale_color_manual(values = cbPalette.ctype, na.value = "grey85") +
facet_wrap(~frac.overlapping.bins) +
theme_bw() +
theme(aspect.ratio=0.5, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom")
dat.umap.long <- dat.umap.lst %>% bind_rows() %>%
mutate(umap2.scale = ifelse(ctype == "B", umap2.scale + 0.75, umap2.scale))
ggplot(dat.umap.long, aes(x = umap1.scale.shift, y = umap2.scale, color = ctype, group = cell)) +
geom_point() +
geom_path(alpha = 0.02) +
geom_vline(xintercept = 0, linetype = "dotted") +
scale_color_manual(values = cbPalette.ctype, na.value = "grey85") +
facet_wrap(~frac.overlapping.bins) +
theme_bw() +
theme(aspect.ratio=0.5, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom")
source("~/projects/scChIX/analysis_scripts/simulation/5-summarize_across_varying_frac_overlap_bins_fix_umap.R", echo=TRUE)
library(scChIX)
source("~/projects/scChIX/analysis_scripts/simulation/5-summarize_across_varying_frac_overlap_bins_fix_umap.R", echo=TRUE)
m.lst <- lapply(frac.mutexcl.str.vec, function(jfrac){
jtitle <- ifelse(jfrac == "1.0", "0.99", jfrac)
jtitle <- 1 - as.numeric(jtitle)
m <- ggplot(dat.binmeans.lst[[jfrac]], aes(x = BinMean.dbl, fill = annot, y = ..count../sum(..count..))) +
geom_histogram(bins = 50, position = "identity", alpha = 0.5) +
ggtitle(paste("True Fraction of Signal Multiplexed to Mark 1. Frac overlap: ", jtitle)) +
theme_bw() +
theme(aspect.ratio=1, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom")
return(m)
})
ggplot(dat.umap.long, aes(x = umap1.scale.shift, y = umap2.scale, color = ctype, group = cell)) +
geom_point() +
geom_path(alpha = 0.02) +
geom_vline(xintercept = 0, linetype = "dotted") +
scale_color_manual(values = cbPalette.ctype, na.value = "grey85") +
facet_wrap(~frac.overlapping.bins) +
theme_bw() +
theme(aspect.ratio=0.5, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom")
ggplot(dat.umap.long, aes(x = umap1.scale.shift, y = umap2.scale, color = ctype, group = cell)) +
geom_point() +
geom_path(alpha = 0.02) +
geom_vline(xintercept = 0, linetype = "dotted") +
scale_color_manual(values = cbPalette.ctype, na.value = "grey85") +
facet_wrap(~frac.overlapping.bins, strip.position = "none") +
theme_bw() +
theme(aspect.ratio=0.5, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom")
ggplot(dat.umap.long, aes(x = umap1.scale.shift, y = umap2.scale, color = ctype, group = cell)) +
geom_point() +
geom_path(alpha = 0.02) +
geom_vline(xintercept = 0, linetype = "dotted") +
scale_color_manual(values = cbPalette.ctype, na.value = "grey85") +
facet_wrap(~frac.overlapping.bins) +
theme_bw() +
theme(aspect.ratio=0.5, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom", strip.text.x = element_blank())
source("~/projects/scChIX/analysis_scripts/simulation/5-summarize_across_varying_frac_overlap_bins_fix_umap.R", echo=TRUE)
ggplot(dat.umap.long, aes(x = umap1.scale.shift, y = umap2.scale, color = ctype, group = cell)) +
geom_point() +
geom_path(alpha = 0.02) +
geom_vline(xintercept = 0, linetype = "dotted") +
scale_color_manual(values = cbPalette.ctype, na.value = "grey85") +
facet_wrap(~frac.overlapping.bins) +
theme_bw() +
theme(aspect.ratio=0.5, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom", strip.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank())
ggplot(dat.umap.long, aes(x = umap1.scale.shift, y = umap2.scale, color = ctype, group = cell)) +
geom_point() +
geom_path(alpha = 0.02) +
geom_vline(xintercept = 0, linetype = "dotted") +
scale_color_manual(values = cbPalette.ctype, na.value = "grey85") +
facet_wrap(~frac.overlapping.bins) +
theme_bw() +
theme(aspect.ratio=0.5, panel.grid.major = element_blank(), panel.grid.minor = element_blank(), legend.position = "bottom", strip.text.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank())
source("~/projects/scChIX/analysis_scripts/simulation/5-summarize_across_varying_frac_overlap_bins_fix_umap.R", echo=TRUE)
